/*
Sound Positioning Functions

This file contains a collection of functions that will make dealing with sound positioning in an environment considerably easier. The functions have support for 1 dimentional environments such as those seen in side scrolling games, as well as 2 dimentional ones where the user moves along both an x and a y axis.
*/

void position_sound_1d(sound@ handle, int listener_x, int source_x, float pan_step, float volume_step)
{
position_sound_custom_1d(handle, listener_x, source_x, pan_step, volume_step, 0.0, 0.0);
}

void position_sound_custom_1d(sound@ handle, int listener_x, int source_x, float pan_step, float volume_step, float start_pan, float start_volume, float start_pitch=100)
{
handle.set_position(listener_x,0,0,source_x, 0, 0, 0, pan_step, volume_step, 0, start_pan, start_volume, start_pitch);
}
void position_sound_2d(sound@ handle, float listener_x, float listener_y, float source_x, float source_y, double theta, float pan_step, float volume_step, float behind_pitch_decrease)
{
position_sound_custom_2d(handle, listener_x, listener_y, source_x, source_y, theta, pan_step, volume_step, behind_pitch_decrease, 0.0, 0.0, 100.0);
}

void position_sound_custom_2d(sound@ handle, float listener_x, float listener_y, float source_x, float source_y, double theta, float pan_step, float volume_step, float behind_pitch_decrease, float start_pan, float start_volume, float start_pitch)
{
handle.set_position(listener_x, listener_y, 0,source_x, source_y, 0, 0, pan_step, volume_step, behind_pitch_decrease, start_pan, start_volume, start_pitch);
}
void position_sound_3d(sound@ handle, float listener_x, float listener_y, float listener_z, float source_x, float source_y, float source_z, double theta, float pan_step, float volume_step, float behind_pitch_decrease)
{
position_sound_custom_3d(handle, listener_x, listener_y, listener_z, source_x, source_y, source_z, theta, pan_step, volume_step, behind_pitch_decrease, 0.0, 0.0, 100.0);
}
void position_sound_custom_3d(sound@ handle, float listener_x, float listener_y, float listener_z, float source_x, float source_y, float source_z, double theta, float pan_step, float volume_step, float behind_pitch_decrease, float start_pan, float start_volume, float start_pitch)
{
handle.set_position(listener_x, listener_y, listener_z,source_x, source_y, source_z, theta, pan_step, volume_step, behind_pitch_decrease, start_pan, start_volume, start_pitch);
}